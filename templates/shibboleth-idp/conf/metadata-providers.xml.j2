<?xml version="1.0" encoding="UTF-8"?>
<MetadataProvider id="ShibbolethMetadata" xsi:type="ChainingMetadataProvider"
    xmlns="urn:mace:shibboleth:2.0:metadata"
    xmlns:resource="urn:mace:shibboleth:2.0:resource"
    xmlns:security="urn:mace:shibboleth:2.0:security"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd
                        urn:mace:shibboleth:2.0:resource http://shibboleth.net/schema/idp/shibboleth-resource.xsd
                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd
                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd">


  <!-- Generated by Ansible using provided information -->
{% for provider in metadataproviders %}
{% if provider.custom is defined %}
    {{ provider.custom }}
{% else %}
  <MetadataProvider id="{{ provider.name }}"
                      xsi:type="FileBackedHTTPMetadataProvider"
                      backingFile="%{idp.home}/metadata/{{ provider.name }}.xml"
                      metadataURL="{{ provider.url }}">
{% if provider.certificate  is defined %}
        <MetadataFilter xsi:type="SignatureValidation" requireSignedRoot="true"
                        certificateFile="%{idp.home}/metadata/{{ provider.name }}.pem"/>
{% endif %}
{% if provider.requiredValidUntil  is defined %}
        <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="{{ provider.requiredValidUntil }}"/>
{% endif %}
  </MetadataProvider>
{% endif %}

{% endfor  %}


</MetadataProvider>
