---
- name: Configure attributes to resolve
  copy:
    src: "{{ idp_authn_LDAP_attribute_resolver }}"
    dest: "{{ idp_home }}/conf/attribute-resolver.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0600
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP url
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.ldapURL                          = {{ idp_authn_LDAP_ldapURL }}"
    regexp: "^idp.authn.LDAP.ldapURL"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP StartTLS
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.useStartTLS                      = {{ idp_authn_LDAP_useStartTLS }}"
    regexp: "idp.authn.LDAP.useStartTLS(.*)=(.*)e$"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Copy LDAP certificate
  copy:
    src: "{{ LDAP.server.certificate }}"
    dest: "{{ idp_home }}/{{ idp_authn_LDAP_trustCertificates }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0600
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  when: LDAP.server.certificate is defined
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP StartTLS Server Certificate
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.trustCertificates                = %{idp.home}/{{ idp_authn_LDAP_trustCertificates }}"
    regexp: "^idp.authn.LDAP.trustCertificates"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP base DN
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.baseDN                           = {{ idp_authn_LDAP_baseDN }}"
    regexp: "^idp.authn.LDAP.baseDN"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP user filter
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.userFilter                       = {{ idp_authn_LDAP_userFilter }}"
    regexp: "^idp.authn.LDAP.userFilter"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP bind DN
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.bindDN                           = {{ idp_authn_LDAP_bindDN }}"
    regexp: "^idp.authn.LDAP.bindDN "
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP bind DN credentials
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.bindDNCredential                 = {{ idp_authn_LDAP_bindDNCredential }}"
    regexp: "^idp.authn.LDAP.bindDNCredential"

  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP DN format
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.authn.LDAP.dnFormat                         = {{ idp_authn_LDAP_dnFormat }}"
    regexp: "^idp.authn.LDAP.dnFormat"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP resolver search filter
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.attribute.resolver.LDAP.searchFilter        = {{ idp_attribute_resolver_LDAP_searchFilter }}"
    regexp: "^idp.attribute.resolver.LDAP.searchFilter"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure LDAP resolver attribute list
  lineinfile:
    dest: "{{ idp_home }}/conf/ldap.properties"
    line: "idp.attribute.resolver.LDAP.returnAttributes    = {{ idp_attribute_resolver_LDAP_returnAttributes }}"
    regexp: "^idp.attribute.resolver.LDAP.returnAttributes"
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure the Password flow for authentication
  lineinfile:
    dest: "{{ idp_home }}/conf/idp.properties"
    line: "idp.authn.flows= Password"
    regexp: "^idp.authn.flows="
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap

- name: Configure the Password flow with LDAP backend
  lineinfile:
    dest: "{{ idp_home }}/conf/authn/password-authn-config.xml"
    line: '    <import resource="ldap-authn-config.xml" />'
    regexp: "^[ ]*<import resource="
  notify: "{{ 'Restart tomcat'  if ansible_virtualization_type != 'docker' else 'Restart tomcat in docker' }}"
  tags:
    - shibboleth
    - idp_configure
    - ldap
